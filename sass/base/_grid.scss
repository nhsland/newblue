// Simplified Grid layout
// 
// This provides the basic 12 column grid 
// with some extra bespoke column options
// for v3 we make use of flex and the cols-n are 
// useful to help for consistent data layouts


// Left Right Split (provides a central gap)
// use cols-6 for no gap
// this is used with flex-layout
.cols-left, .cols-right {
	width:49%;
}

// not covered by 12 col grid
.cols-fifth {
	width: 20%;
}

// center a single column contents
.cols-center {
	margin:0 auto; 
}

.cols-1 {
width: 8.33333%;
}

.cols-2 {
width: 16.66667%;
}

.cols-3, cols-quarter {
width: 25%;
}

.cols-4 {
width: 33.33333%;
}

.cols-5 {
width: 41.66667%;
}

.cols-6, cols-half {
width: 50%;
}

.cols-7 {
width: 58.33333%;
}

.cols-8 {
width: 66.66667%;
}

.cols-9 {
width: 75%;
}

.cols-10 {
width: 83.33333%;
}

.cols-11 {
width: 91.66667%;
}

.cols-12, .cols-full {
width: 100%;
}

// 'col-gap' - mostly used in Element data layout
// Provide a consistent column gap (gutter) for layouts using
// either flex or tables to layout data:
.col-gap {
	> div[class^="cols-"], 
	> td {
		padding-right:30px !important; // need to overide <td> css in elements, keeping this here for clarity
		&:last-child {
			padding-right:0 !important;
		}
	}
}
// same but smaller... (e.g. see injection edit layout)
.col-gap-small {
	> div[class^="cols-"], 
	> td {
		padding-right:10px !important; 
		&:last-child {
			padding-right:0 !important;
		}
	}
}

