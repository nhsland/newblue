/*
*  OE v3.0 
*  Gulp file generates :
*  - style_oe3.0.css 
*  - style_oe3.0_classic.css : 'classic' colour scheme
*  - eyedraw_draw_icons.css : Eyedraw doodle icon
*  - eyedraw-draw-icons-32x32.png : Sprite sheet of Eyedraw doodle icons
*  CSS is readable and compressed.	
*/

var gulp = require('gulp');
// sass
var sass = require('gulp-sass');
var autoprefixer = require('gulp-autoprefixer');
// sprites
var spritesmith = require('gulp.spritesmith');
// files
var rename = require('gulp-rename');
var es = require('event-stream');
// headers
var header = require('gulp-header');

// config
var config = {
	sass:'sass/style_oe3.0_pro.scss',					// root scss file for OE v3.0  (Pro, default theme)
	classic:'sass/style_oe3.0_classic.scss', 			// ... scss for Classic theme
	eyedrawSass:'sass/style_eyedraw-draw-icons.scss', 	// eyedraw draw doodle icons
	highchart:'sass/highcharts.scss',					// highStocks CSS (Styled mode)
	css:'css',
}

/*
*  default 	
*/
gulp.task('default',['eyedraw_sprites','eyedraw_sass','event_sprites','sass','watch-sass']);

/*
*  watch scss (Pro & Classic themes)
*  (note: not watching Eyedraw scss, as only updated ocassionaly)	
*/
gulp.task('watch-sass', function() {
    gulp.watch( 'sass/**/*.scss', ['sass','sass-classic','sass-highcharts']);
});

/*
*  default. 
*  PRO theme (v3.0) 
*  create readable and compressed css	
*/
gulp.task('sass',function(){
	
	var min = gulp.src( config.sass )
				.pipe( sass( {outputStyle:'compressed'} ) )
				.pipe( rename('style_oe3.0.min.css') )
				.pipe( autoprefixer()); // browserList set in package.json
					
	var css = gulp.src( config.sass )
				.pipe( sass( {errLogToConsole:true, outputStyle:'expanded'} ).on( 'error', sass.logError ) )
				.pipe(rename('style_oe3.0.css') )
				.pipe( autoprefixer() ); // browserList set in package.json
					
	// merge and output			
	return	es.merge( min,css ).pipe( gulp.dest( config.css ) );
});

/*
*  classic theme (v3.0) 
*  only create compressed css	
*  CSS is identical to PRO with color changes
*/
gulp.task('sass-classic',function(){
	
	return gulp.src( config.classic )
		.pipe( sass( {outputStyle:'compressed'} ) )
		.pipe( rename('style_oe3.0_classic.min.css') )
		.pipe( autoprefixer() ) 				
		.pipe( gulp.dest( config.css ) );
});

/*
*  JS HighStocks CSS (v3.0) 
*  only create compressed css	
*/
gulp.task('sass-highcharts',function(){
	
	return gulp.src( config.highchart )
		.pipe( sass( {outputStyle:'compressed'} ) )
		.pipe( rename('highcharts.css') )
		.pipe( autoprefixer() ) 				
		.pipe( gulp.dest( config.css ) );
});



/*
*  Eyedraw Draw Icons. 
*  
*  makes use of 'eyedraw-draw-sprites.scss', this
*  is generated by task 'eyedraw_sprites' below
*  create readable and compressed css	
*/
gulp.task('eyedraw_sass',function(){
	
	var min = gulp.src( config.eyedrawSass )
				.pipe( sass( {outputStyle:'compressed'} ) )
				.pipe( rename('eyedraw_draw_icons.min.css') )
					
	var css = gulp.src( config.eyedrawSass )
				.pipe( sass( {errLogToConsole:true, outputStyle:'expanded'} ).on( 'error', sass.logError ) )
				.pipe( rename('eyedraw_draw_icons.css') )
					
	// merge and output			
	return	es.merge( min,css ).pipe( gulp.dest( config.css ) );
});

/*
* Create Eyedraw sprite PNG and SCSS sprite position sheet
*/
gulp.task('eyedraw_sprites', function () {
	// ensure the path is correct to files or it will fail silently.
	// ALL icons MUST be 32 x 32 px!!
	// Because they are used at 2 sizes: normal and 50% in CSS (.small)
	var spriteIcons = 'img/icons-eyedraw/32x32/**/*.png';
	
	var gulpScss = ['//',
  '// --- Gulp Generated SCSS file ',
  '// --- Do not edit this file directly ',
  '//',
  '// --- OE Eyedraw Icons - sprite positions',
  '//',
  ''].join('\n'); 	

	var spriteData = gulp.src( spriteIcons )
						.pipe(spritesmith({
								imgName: 		'../img/eyedraw-draw-icons-32x32.png', 				// export PNG sprite sheet
								cssName: 		'_eyedraw-draw-sprites.scss',						// create SASS sprite sheet 
								cssTemplate: 	'sass/_handlebars/eyedrawSprite.scss.handlebars', 	// SASS template file
								cssHandlebarsHelpers: { half: function (num) { return num/2; } }
								
					}));
					
   spriteData.img.pipe(gulp.dest( 'img' ));
   
   spriteData.css.pipe( header( gulpScss) );
   spriteData.css.pipe(gulp.dest( 'sass/eyedraw-icons' ));
  
});


/*
* Create Event sprite PNG and SCSS sprite position sheet
*/
gulp.task('event_sprites', function () {
	// ensure the path is correct to files or it will fail silently.
	// ALL icons MUST be 76px x 76px
	// They are used in CSS at 50% and at 25% (38px & 19px)
	
	var spriteIcons = 'img/icons-events/76x76/*.png';
	
	var gulpScss = ['//',
  '// --- Gulp Generated SCSS file ',
  '// --- Do not edit this file directly ',
  '//',
  '// --- OE Event Icons - sprite positions',
  '//',
  ''].join('\n');  	

	var spriteData = gulp.src( spriteIcons )
						.pipe(spritesmith({
								imgName: 		'../img/event-icons-76x76.png', 				// export PNG sprite sheet
								cssName: 		'_icons-events-sprites.scss',						// create SCSS sprite sheet 
								cssTemplate: 	'sass/_handlebars/eventSprite.scss.handlebars', 	// SCSS template file
								cssHandlebarsHelpers: { 	half: function (num) { return num/2; },
															quarter: function (num) { return num/4; }  }
								
					}));
   
   spriteData.img.pipe(gulp.dest( 'img' ));
   
   spriteData.css.pipe( header( gulpScss) );
   spriteData.css.pipe(gulp.dest( 'sass/openeyes' ));
  
});





